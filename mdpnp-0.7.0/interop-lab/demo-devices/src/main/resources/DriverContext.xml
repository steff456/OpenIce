<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util-4.1.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd">


  <context:annotation-config />

  <bean id="taskExecutor"
        class="org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean">
    <property name="poolSize" value="1" />
    <property name="WaitForTasksToCompleteOnShutdown" value="false" />
    <property name="threadGroupName" value="driverTaskExecutor"/>
  </bean>

  <!--
  This is probably the most spring-involved part of codebase: we want to have one spring configuration
  for all devices - all components are the same with the exception of the driver itself. The
  driver is being created via the factory pattern. The factory has a setDriverProvider
  API that will get called from the bootstap handler of the standalone application or from the
  gui drop down when user selects the proper device type. The trick is to take the
  DeviceDriverProvider object that is passed down and inject it into this instance of
  AbstractDeviceFactory. See org.mdpnp.devices.SpringLoadedDriver for more info on initialization
  steps.
  -->
  <bean id="driver"
        class="org.mdpnp.devices.DeviceDriverProvider.AbstractDeviceFactory"
        destroy-method="shutdown">
    <property name="executor" ref="taskExecutor"/>
  </bean>

  <bean id="deviceIdentity" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="targetObject" ref="driver"/>
    <property name="targetMethod" value="getDeviceIdentity"/>
  </bean>

  <bean id="partition" class="org.mdpnp.devices.PartitionAssignmentControllerFactory">
    <constructor-arg ref="taskExecutor"/>
    <constructor-arg ref="deviceIdentity"/>
    <constructor-arg ref="domainParticipant"/>
    <constructor-arg ref="eventLoop"/>
    <constructor-arg ref="publisher"/>
    <constructor-arg ref="subscriber"/>
    <constructor-arg value="${mdpnp.partition.file}"/>
  </bean>

  <!--
  Do not start right away. Delegate to the LifecycleController to do it at the very end avter all beans
  are up so that we do not skip any DDS events
  -->
  <bean id="timeManager" class="org.mdpnp.devices.TimeManager"
        destroy-method="stop">
    <constructor-arg ref="taskExecutor"></constructor-arg>
    <constructor-arg ref="eventLoop"></constructor-arg>
    <constructor-arg ref="publisher"></constructor-arg>
    <constructor-arg ref="subscriber"></constructor-arg>
    <constructor-arg ref="deviceIdentity"></constructor-arg>
    <!--  The last argument here puts the TimeManager into emitting mode; otherwise it is passive -->
    <constructor-arg type="java.lang.String"><value>Device</value></constructor-arg>
  </bean>

  <!-- ================================================================================================- -->

  <bean id="jmxServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
    <property name="locateExistingServerIfPossible" value="true"/>
  </bean>

  <bean id="jmx.attributeSource"
        class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"/>

  <bean id="jmx.assembler" class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
    <property name="attributeSource" ref="jmx.attributeSource"/>
  </bean>

  <bean id="jmx.namingStrategy" class="org.mdpnp.devices.DeviceDriverProvider.DeviceFactoryNamingStrategy">
  </bean>

  <!--
      List of managed beans that specify managed attributes via annotations.
  -->
  <bean id="annotations.exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
    <property name="assembler" ref="jmx.assembler"/>
    <property name="autodetect" value="true"/>
    <property name="namingStrategy" ref="jmx.namingStrategy"/>
  </bean>

  <bean id="lifecycleController" class="org.mdpnp.devices.LifecycleController">
    <property name="startMethod" value="start"/>
    <property name="managedBeans">
      <list>
        <ref bean="timeManager" />
      </list>
    </property>
  </bean>

</beans>