/*******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/
apply plugin: 'java'

// By default we build (no task specified)
defaultTasks 'build'

sourceCompatibility = JAVA_VERSION_SOURCE
targetCompatibility = JAVA_VERSION_CLASSES

def GENERATED_JAVA_SOURCES = new File(project.projectDir, 'build/generated/src/main/java').getAbsolutePath()
def GENERATED_CPP_SOURCES  = new File(project.projectDir, 'build/generated/src/main/cpp').getAbsolutePath()

// configuration for code generation
configurations { osplidlpp }

// add generated source code to the main java sourceset
sourceSets {
  main {
    java {
      srcDirs += GENERATED_JAVA_SOURCES
    }
  }
}

// include java source code in the assembled jar
jar.doFirst {
  sourceSets.main.java.srcDirs.each {
    from it
  }
}

dependencies {
  compile project(':data-types:x73-idl')
  compile files("$System.env.OSPL_HOME/jar/$System.env.SPLICE_TARGET/dcpssaj.jar")
}

// makes output directories for the code generator
task mkdirs << {
  file(GENERATED_JAVA_SOURCES).mkdirs()
  file(GENERATED_CPP_SOURCES).mkdirs()
}


// Runs the IDLPP DDS Generate code generator for all idl files under src/main/idl
task osplIdlppJava(dependsOn: [mkdirs]) << {
  FileTree idlFiles = project(':data-types:x73-idl').build.source
  
  for(File f : idlFiles) {
    println 'Generating from ' + f.name
    exec {
        executable = 'idlpp'
        args = [
            '-I', project(':data-types:x73-idl').projectDir.getAbsolutePath()+'/src/main/idl',
            '-l', 'java', '-d', GENERATED_JAVA_SOURCES, f.getAbsolutePath(),]
    }
  }
}

// Deletes the java code generated by the IDLPP DDS code generator
task cleanOsplIdlppJava(type: Delete) {
  delete GENERATED_JAVA_SOURCES, GENERATED_CPP_SOURCES
}

// IDL files are the inputs to the code generator
osplIdlppJava.inputs.source(project(':data-types:x73-idl').build.source)

// java files under generated/src/main/java are the outputs of the code generator
osplIdlppJava.outputs.files(fileTree(dir: GENERATED_JAVA_SOURCES).include('**/*.java'))

// before compiling java code generation must complete
compileJava.dependsOn 'osplIdlppJava'

// before cleaning generated sources should be cleaned
clean.dependsOn 'cleanOsplIdlppJava'

